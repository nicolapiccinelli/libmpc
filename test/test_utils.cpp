/*
 *   Copyright (c) 2023-2025 Nicola Piccinelli
 *   All rights reserved.
 */
#include "basic.hpp"
#include <mpc/Utils.hpp>
#include <catch2/catch_test_macros.hpp>
#include <catch2/catch_template_test_macros.hpp>

TEST_CASE("Checking LTI system discretization", "[utils]")
{
    constexpr size_t dof = 6;
    mpc::mat<2 * dof, 2 * dof> A, Ad, Ad_test;
    A << 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;

    mpc::mat<2 * dof, dof> B, Bd, Bd_test;
    B.block(0, 0, dof, dof) << mpc::mat<dof, dof>::Zero();
    B.block(dof, 0, dof, dof) << mpc::mat<dof, dof>::Identity();

    mpc::discretization<2 * dof, dof>(A, B, 0.02, Ad, Bd);

    Ad_test << 
        1, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0.02, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0.02, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0.02, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0.02,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;

    Bd_test << 
        0.0002, 0, 0, 0, 0, 0,
        0, 0.0002, 0, 0, 0, 0,
        0, 0, 0.0002, 0, 0, 0,
        0, 0, 0, 0.0002, 0, 0,
        0, 0, 0, 0, 0.0002, 0,
        0, 0, 0, 0, 0, 0.0002,
        0.02, 0, 0, 0, 0, 0,
        0, 0.02, 0, 0, 0, 0,
        0, 0, 0.02, 0, 0, 0,
        0, 0, 0, 0.02, 0, 0,
        0, 0, 0, 0, 0.02, 0,
        0, 0, 0, 0, 0, 0.02;

    REQUIRE(Ad_test.isApprox(Ad));
    REQUIRE(Bd_test.isApprox(Bd));
}